#include "node.h"
#include "codegen.h"
#include "parser.hpp"

using namespace std;

void ContextoGeneracion::generarCodigo(Bloque& root)
{
	std::cout << "Generando código...\n";
	root.codeGen(*this);
	std::cout << "El código se ha generado.\n";

}

std::string* Bloque::codeGen(ContextoGeneracion& context)
{
	ListadoSentencias::const_iterator it;
	std::string *last = NULL;
	for (it = statements.begin(); it != statements.end(); it++) {
		std::cout << "Generando código para " << typeid(**it).name() << endl;
		last = (**it).codeGen(context);
	}
	std::cout << "Creando bloque" << endl;
	return last;
}

std::string* Entero::codeGen(ContextoGeneracion& context)
{
	std::cout << "Creando entero: " << value << endl;
	std::string *result = new std::string("");
	return result;
}

std::string* Identificador::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}

std::string* InvocacionFuncion::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}

std::string* Asignacion::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}

std::string* ExpresionSentencia::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}

std::string* DeclaracionVariable::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}

std::string* DeclaracionFuncion::codeGen(ContextoGeneracion& context)
{
	std::string *result = new std::string("");
	return result;
}
